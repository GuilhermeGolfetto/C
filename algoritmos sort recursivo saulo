/*
 * bibliotecaDeOrdenacao.c
 *
 *  Created on: 25 de fev de 2016
 *      Author: mac
 */
#include <stdio.h>

/**
 * Algoritmo de Troca
 */
void bubleSort(int tamanhoDoVetor, int vetor[]) {
	int aux = 0;
	for (int i = tamanhoDoVetor - 1; i >= 1; i--) {
		for (int j = 0; j < i; j++) {
			if (vetor[j] > vetor[j + 1]) {
				aux = vetor[j];
				vetor[j] = vetor[j + 1];
				vetor[j + 1] = aux;
			}
		}
	}
}

/**
 * Algoritmo de Selecao
 */
void selectionSort(int tamanhoDoVetor, int vetor[]) {
	int i, j, min, x;
	for (i = 0; i < tamanhoDoVetor - 1; i++) {
		min = i;
		for (j = i + 1; j < tamanhoDoVetor; j++) {
			if (vetor[j] < vetor[min]) {
				min = j;
			}
		}
		x = vetor[i];
		vetor[i] = vetor[min];
		vetor[min] = x;
	}
}

/**
 * Algoritmo de insercao
 */
void insertionSort(int tamanhoDoVetor, int vetor[]) {
	int i, j, x;
	for (j = 1; j < tamanhoDoVetor; j++) {
		x = vetor[j];
		for (i = j - 1; i >= 0 && vetor[i] > x; i--) {
			vetor[i + 1] = vetor[i];
		}
		vetor[i + 1] = x;
	}
}

void insertionSortRecursive(int i, int vetor[], int tamanhoDoVetor) {
	if (i < tamanhoDoVetor) {
		int j;
		int aux = vetor[i];
		for (j = i; j > 0 && vetor[j - 1] > aux; j--)
			vetor[j] = vetor[j - 1];
		vetor[j] = aux;
		insertionSortRecursive(++i, vetor, tamanhoDoVetor);
	}
}
void printarVetor(int tamanhoDoVetor, int vetor[]) {
	printf("\n");
	for (int r = 0; r < tamanhoDoVetor; ++r) {
		printf("%d ", vetor[r]);
	}
}
